// Include statment includes code from specified file
include "./example-module.tsk";
[1, 2, 3];
// variable declarations
a = 2;
b = 4;
c = 6;
// __external_var is for exposing external variable 
// (also can be used for executing statments that are implented in js but not yet in tsk)
Function = __external_var("Function");
console = __external_var("console");
window = Function("return this")();
pr = __external_var("pr");
d = 4;
fn sum(a, b, c) {
    nonlocal d;
    d = 5;
    return a + b + c + d;
}
sum(1, 2, 3, 0, , /*undefined*/, 10); // Empty holes will be replaced by undefined
sum(4, 5, 6, , , ); // Empty holes at the call params end will get stripped
sum(7, 8, 9, undefined); // Undefined value also will get stripped
__external_var("console").log(sum(a, b, c));
window.sum = sum;
async fn promise(value) => await pr(value);
console.log(await promise(a));
fn Stream(text) {
    index = 0;
    obj = __external_var("{}");
    obj.next = text[0];
    obj.move = fn () {
        next = text[__index];
        this.next = text[__index += 1];
        return next;
    }
    return obj;
}
global = Function("return this")();
global.Stream = Stream;
array = [0, , , , 0];
console.log(array[0]);
fn _() {}
async fn _2() { }
async fn* _3() { }
async fn* _4(a, b, c, d) {
    yield 0;
}
fn* _5() {
    // ...statments
}
if (true /* expression */) {
    // ...statments
} else if (1 /* expression */) {
    // ...statments
} else {
    // ...statments
}
// internal: console.log("Hello from internal stmt!");
// Absolutly valid shit
a + if (b === 1) {
    return 2;
} else {
    return b;
};

lol = undefined;
lol?.null?.dsa?.[2].p;
lol?.null?.dsa?.[2].p;
fn p() {
    return arguments;
}
p::(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
async fn _temp() => {
    await 0;
    console.log(1);
}
fn* test(...args) {
    yield* args;
}
console.log(await.all test(pr(1), pr(2), pr(3), 4, 5, 6, pr(7)));
_temp();
console.log(2);
kek = 0;
lel = 10;
keep(kek, lel) {
    kek = 1;
    lel = 2;
    console.log(kek, lel);
}
console.log(kek, lel);

fn leel() {}
fn kok() {}
proto = __external_var("{}");
proto._ = fn () {}
kok.prototype = leel.prototype = proto;
new leel()?.l;
new kok()?.dsa + new leel()._()?.j;
new kok().l;
fn restTest1(...args) {
    console.log(args);
}
fn restTest2(_, ...args) {
    console.log(args);
}
fn restTest3(...args, _) {
    console.log(args, _);
}
fn restTest4(_, ...args, _2) {
    console.log(args, _2);
}
fn restTest5(_, ...args, _2, _3, _4) {
    console.log(args, _2, _3, _4);
}
restTest1(1, 2, 3);
restTest2(1, 2, 3);
restTest3(1, 2, 3);
restTest4(1, 2, 3);
restTest5(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
class A extends leel with echo {
    
}
try {
    null!;
} catch (e) {
    console.error(e);
}
try {
    new leel()._!.s;
} catch (e) {
    console.error(e);
}
try {
    0;
} catch (cought) {
    1;
} else {
    2;
} finally {
    3;
}
{
    try { } finally { }
    try { } else {  }
    try { } catch { }
    try { }
}
i = 0;
while (i < 10) {
    console.log(i);
    i += 1;
}
fn test__() {
    try {
        return "Hello from try block!";
    } else {
        return "Hello from else block!";
    }
}
__external_var("console").log(test__()); // Prints "Hello from try block!"
try {
    try {
        console.log("inner try");
    } catch (error) {
        // Never gets executed
        console.error("inner", error);
    } else {
        // Note that placing else before catch 
        // doesn't change anything
        throw "Test"; 
    } finally {
        console.log("inner finally");
    }
} catch (error) {
    console.error("outer", error);
}
console.log("$$$".replace(__external_var("/\$?/g"), "()"));
(fn () {}, fn() {})()
//;~;
;